# Gitignore file
# -------------
# Specifies intentionally untracked files that Git should ignore.
# See https://git-scm.com/docs/gitignore for syntax details.
# This file is tailored for a stack including pyenv, uv, rbenv, fnm, Docker (Colima), macOS.

# --- Project Version Files ---
# It is HIGHLY RECOMMENDED to *COMMIT* these files into your repository.
# They ensure that collaborators and deployment environments use the
# correct language versions as managed by pyenv, rbenv, and fnm.
# ONLY uncomment and add these if you have a very specific reason NOT to track them.
# .python-version  # Used by pyenv to specify Python version for the project.
# .ruby-version    # Used by rbenv to specify Ruby version for the project.
# .node-version    # Used by fnm/nvm/asdf to specify Node.js version for the project.
# .nvmrc           # Alternative file used by nvm/fnm for Node.js version.

# --- Python ---
# Ignore directories created for Python virtual environments. These contain installed
# packages specific to a project and should not be committed. Regenerated using
# tools like 'uv venv', 'python -m venv', or 'virtualenv'.
.venv/
env/
venv/
# Ignore Python bytecode files (compiled .py files) and optimizer output.
# These are generated automatically by the Python interpreter.
__pycache__/
*.pyc
*.pyo
*.pyd
# Ignore cache directories created by Python testing and type-checking tools.
.pytest_cache/
.mypy_cache/
.ruff_cache/ # Cache for Ruff linter/formatter
# Ignore files and directories related to Python package distribution and installation.
# These are generated when building or installing packages (e.g., using setup.py, build, pip).
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
# Ignore Jupyter Notebook checkpoint files.
.ipynb_checkpoints/

# --- Ruby ---
# Ignore directories and files related to Ruby package management (Bundler/Gems).
# Dependencies should be managed via Gemfile and Gemfile.lock (which SHOULD be committed).
/.bundle/         # Bundler's project-specific configuration (root directory only).
/vendor/bundle/   # Default Bundler installation location for project gems (root directory only).
# /vendor/cache/    # Less common: Bundler package cache via `bundle package` (can often be removed).
*.gem             # Compiled Ruby Gem packages.
# Ignore Ruby documentation generation cache (YARD).
/.yardoc/         # (root directory only - keep if using YARD).
/_yardoc/         # (root directory only - keep if using YARD).
# Ignore RSpec state file (often contains run order).
/spec/examples.txt # (root directory only - keep if using RSpec).
# Removed '*.rbc' and '*.mrb' (obsolete/niche) and '/.config' (too generic).

# --- Node.js ---
# Ignore directories containing Node.js project dependencies.
# These are installed via package managers (npm, yarn, pnpm) based on
# package.json and lock files (package-lock.json, yarn.lock etc. SHOULD be committed).
node_modules/
# Ignore debug log files generated by Node package managers.
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
# Ignore lock files (Optional: Uncomment ONE line below ONLY if your team explicitly
# chooses NOT to commit lock files, which is generally discouraged for applications).
# package-lock.json # npm lock file
# yarn.lock         # yarn lock file
# pnpm-lock.yaml    # pnpm lock file
# Ignore common build output directories for Node.js projects (especially frontend frameworks).
dist/             # Common distribution folder
build/            # Common build folder
.next/            # Next.js build output and cache
.nuxt/            # Nuxt.js build output and cache
out/              # Common static export folder name

# --- Compiled Sources & Build Artifacts (General) ---
# Ignore compiled object files, libraries, executables for various languages (C, C++, Java, etc.).
*.a               # Static library archive (Unix)
*.bin             # Generic binary output
*.class           # Java compiled bytecode
*.com             # MS-DOS command file
*.dll             # Dynamic Link Library (Windows)
*.dylib           # Dynamic library (macOS)
*.ear             # Java Enterprise Archive
*.elf             # Executable and Linkable Format (Linux)
*.exp             # Export file (Windows)
*.gch             # GCC precompiled header output
*.idb             # Incremental Database file (MS Visual Studio)
*.ilk             # Incremental Link file (MS Visual Studio)
*.jar             # Java Archive
*.ko              # Linux Kernel Module
*.la              # Libtool archive metadata
*.lai             # Libtool archive metadata (installed)
*.lib             # Static library (Windows)
*.lo              # Libtool object file
*.o               # Object file (Unix)
*.obj             # Object file (Windows)
*.out             # Generic executable/output (Unix)
*.pdb             # Program Database file (MS Visual Studio debug info)
*.pch             # Precompiled header (Various compilers)
*.pyd             # Python compiled module (often C extensions)
*.so              # Shared object/library (Linux/Unix)
*.war             # Java Web Archive
# Ignore common build output directories used by various tools/languages.
build/            # Catch-all build directory
dist/             # Catch-all distribution directory
target/           # Common build directory (Rust, Java Maven/Gradle)
cmake-build-*/    # CMake build output directory pattern (CLion, etc.)

# --- Debug Symbols ---
# Ignore debug symbol directories generated on macOS during compilation.
*.dSYM/

# --- OS Generated Files ---
# Ignore metadata and temporary files generated by operating systems.
# macOS:
.DS_Store         # Finder folder custom view settings
.DS_Store?        # Alternate form
._*               # Resource fork/metadata files (often from FAT filesystems)
.Spotlight-V100   # Spotlight indexing data
.Trashes          # User Trash folder metadata
Icon*             # Custom folder/file icon data (catches Icon\r)
*.DocumentRevisions-V100* # macOS document versioning data
# Windows:
Thumbs.db         # Thumbnail cache for images/videos
ehthumbs.db       # Thumbnail cache
Desktop.ini       # Folder customization settings
$RECYCLE.BIN/     # System Recycle Bin directory (often on external drives/shares)
*.lnk             # Shortcut files
# Linux:
.Trash-*/         # Common pattern for user Trash folders on Linux

# --- Editor/IDE Specific ---
# Ignore temporary files, workspace state, and user settings for common editors/IDEs.
# Vim:
*.swp             # Swap file (buffer backup)
*.swo             # Swap file (encrypted)
# *.vim             # Ignore only if storing project-specific vim config (rarely needed)
# VS Code: Selectively ignore workspace files. Commit shared settings (launch, tasks, extensions).
.vscode/*         # Ignore everything in .vscode by default...
# !.vscode/settings.json    # ...but DO commit shared workspace settings.
# !.vscode/tasks.json       # ...and DO commit shared tasks.
# !.vscode/launch.json      # ...and DO commit shared debug launch configurations.
# !.vscode/extensions.json  # ...and DO commit recommended extensions for the project.
*.code-workspace  # Ignore multi-root workspace files (user-specific usually)
# JetBrains IDEs (IntelliJ, PyCharm, WebStorm, etc.): Selectively ignore. Commit shared settings.
.idea/*           # Ignore everything in .idea by default...
# !.idea/misc.xml         # ...but DO commit some miscellaneous project settings.
# !.idea/modules.xml      # ...and DO commit module structure.
# !.idea/runConfigurations/ # ...and DO commit shared run configurations.
# !.idea/libraries/       # ...and DO commit library definitions if not managed externally.
# !.idea/codeStyles/      # ...and DO commit shared code style settings.
# !.idea/artifacts/       # Build artifacts defined in IDE - usually safe to ignore.

# --- Temporary, Cache & Backup Files ---
# Ignore common temporary, backup, or cache files/directories.
*~                # Common backup suffix (e.g., emacs)
*.bak             # Common backup suffix
*.cache           # Generic cache files/folders
.cache/           # Generic cache directory
*.orig            # Common backup suffix (e.g., patch)
*.patch           # Patch files (consider if these should sometimes be committed)
*.rej             # Patch reject files
*.tmp             # Generic temporary files
# Zsh completion cache (usually global ~/.zcompdump*, but ignore just in case)
/.zcompdump*      # (root directory only)

# --- Logs, Databases & History ---
# Ignore log files, local databases, and command history files.
*.db              # Generic database files
*.log             # Log files
*.sqlite          # SQLite database files
*.history         # Common history file extension
*.hist            # Common history file extension
# *.sql             # Be cautious: Ignore generated SQL data dumps, but commit schema definition files.

# --- Environment Files ---
# Ignore environment configuration files that often contain sensitive credentials or secrets.
# Use .env.example (committed) to show required variables.
.env
.env.*
!.env.example     # DO commit the example file.

# --- Compressed Archives & Binary Packages ---
# Generally ignore archives and large binary packages. Store source code instead.
# Git handles text compression well; large binaries bloat repository history.
*.7z
*.dmg
*.gz
*.iso
*.rar
*.tar
*.zip

# --- Media Files ---
# Ignore common media files unless they are essential source assets for the project
# (e.g., game assets, website media). Uncomment lines below if needed.
# Images:
# *.ico
# *.jpg
# *.jpeg
# *.png
# *.gif
# *.svg
# Audio:
# *.mp3
# *.ogg
# *.wav
# *.flac
# Video:
# *.mp4
# *.avi
# *.flv
# *.mov
# *.wmv

# --- Terraform ---
# Ignore Terraform state files (contain infrastructure state, potentially sensitive)
# and local configuration/cache directories.
# *.tfstate
# *.tfstate.backup
# .terraform/
# crash.log

# --- Other Generated Files ---
_site/            # Default Jekyll static site output directory

# --- Project Specific ---
# Add any files or directories specific to THIS project that should be ignored below this line.
.gitconfig.private # Example: A private git config snippet not meant for sharing
